{
	"id": "097b5192bf1dd5fd732076cbc63e582b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/interfaces/IValidator.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IValidator {\r\n    // error DepositsNotEqual();\r\n    // error BelowMinimumK();\r\n    // error FactoryAlreadySet();\r\n    // error InsufficientLiquidity();\r\n    // error InsufficientLiquidityMinted();\r\n    // error InsufficientLiquidityBurned();\r\n    // error InsufficientOutputAmount();\r\n    // error InsufficientInputAmount();\r\n    // error IsPaused();\r\n    // error InvalidTo();\r\n    // error K();\r\n    // error NotEmergencyCouncil();\r\n\r\n    // event Fees(address indexed sender, uint256 amount0, uint256 amount1);\r\n    // event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    // event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\r\n    // event Swap(\r\n    //     address indexed sender,\r\n    //     address indexed to,\r\n    //     uint256 amount0In,\r\n    //     uint256 amount1In,\r\n    //     uint256 amount0Out,\r\n    //     uint256 amount1Out\r\n    // );\r\n    // event Sync(uint256 reserve0, uint256 reserve1);\r\n    // event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\r\n\r\n    // // Struct to capture time period obervations every 30 minutes, used for local oracles\r\n    // struct Observation {\r\n    //     uint256 timestamp;\r\n    //     uint256 reserve0Cumulative;\r\n    //     uint256 reserve1Cumulative;\r\n    // }\r\n\r\n    // /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\r\n    // function metadata()\r\n    //     external\r\n    //     view\r\n    //     returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\r\n\r\n    // /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\r\n    // function claimFees() external returns (uint256, uint256);\r\n\r\n    // /// @notice Returns [token0, token1]\r\n    // function tokens() external view returns (address, address);\r\n\r\n    // /// @notice Address of token in the pool with the lower address value\r\n    // function token0() external view returns (address);\r\n\r\n    // /// @notice Address of token in the poool with the higher address value\r\n    // function token1() external view returns (address);\r\n\r\n    // /// @notice Address of linked PoolFees.sol\r\n    // function poolFees() external view returns (address);\r\n\r\n    // /// @notice Address of PoolFactory that created this contract\r\n    // function factory() external view returns (address);\r\n\r\n    // /// @notice Capture oracle reading every 30 minutes (1800 seconds)\r\n    // function periodSize() external view returns (uint256);\r\n\r\n    // /// @notice Amount of token0 in pool\r\n    // function reserve0() external view returns (uint256);\r\n\r\n    // /// @notice Amount of token1 in pool\r\n    // function reserve1() external view returns (uint256);\r\n\r\n    // /// @notice Timestamp of last update to pool\r\n    // function blockTimestampLast() external view returns (uint256);\r\n\r\n    // /// @notice Cumulative of reserve0 factoring in time elapsed\r\n    // function reserve0CumulativeLast() external view returns (uint256);\r\n\r\n    // /// @notice Cumulative of reserve1 factoring in time elapsed\r\n    // function reserve1CumulativeLast() external view returns (uint256);\r\n\r\n    // /// @notice Accumulated fees of token0 (global)\r\n    // function index0() external view returns (uint256);\r\n\r\n    // /// @notice Accumulated fees of token1 (global)\r\n    // function index1() external view returns (uint256);\r\n\r\n    // /// @notice Get an LP's relative index0 to index0\r\n    // function supplyIndex0(address) external view returns (uint256);\r\n\r\n    // /// @notice Get an LP's relative index1 to index1\r\n    // function supplyIndex1(address) external view returns (uint256);\r\n\r\n    // /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\r\n    // function claimable0(address) external view returns (uint256);\r\n\r\n    // /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\r\n    // function claimable1(address) external view returns (uint256);\r\n\r\n    // /// @notice Returns the value of K in the Pool, based on its reserves.\r\n    // function getK() external returns (uint256);\r\n\r\n    // /// @notice Set pool name\r\n    // ///         Only callable by Voter.emergencyCouncil()\r\n    // /// @param __name String of new name\r\n    // function setName(string calldata __name) external;\r\n\r\n    // /// @notice Set pool symbol\r\n    // ///         Only callable by Voter.emergencyCouncil()\r\n    // /// @param __symbol String of new symbol\r\n    // function setSymbol(string calldata __symbol) external;\r\n\r\n    // /// @notice Get the number of observations recorded\r\n    // function observationLength() external view returns (uint256);\r\n\r\n    // /// @notice Get the value of the most recent observation\r\n    // function lastObservation() external view returns (Observation memory);\r\n\r\n    // /// @notice True if pool is stable, false if volatile\r\n    // function stable() external view returns (bool);\r\n\r\n    // /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    // function currentCumulativePrices()\r\n    //     external\r\n    //     view\r\n    //     returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\r\n\r\n    // /// @notice Provides twap price with user configured granularity, up to the full window size\r\n    // /// @param tokenIn .\r\n    // /// @param amountIn .\r\n    // /// @param granularity .\r\n    // /// @return amountOut .\r\n    // function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\r\n\r\n    // /// @notice Returns a memory set of TWAP prices\r\n    // ///         Same as calling sample(tokenIn, amountIn, points, 1)\r\n    // /// @param tokenIn .\r\n    // /// @param amountIn .\r\n    // /// @param points Number of points to return\r\n    // /// @return Array of TWAP prices\r\n    // function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\r\n\r\n    // /// @notice Same as prices with with an additional window argument.\r\n    // ///         Window = 2 means 2 * 30min (or 1 hr) between observations\r\n    // /// @param tokenIn .\r\n    // /// @param amountIn .\r\n    // /// @param points .\r\n    // /// @param window .\r\n    // /// @return Array of TWAP prices\r\n    // function sample(\r\n    //     address tokenIn,\r\n    //     uint256 amountIn,\r\n    //     uint256 points,\r\n    //     uint256 window\r\n    // ) external view returns (uint256[] memory);\r\n\r\n    // /// @notice This low-level function should be called from a contract which performs important safety checks\r\n    // /// @param amount0Out   Amount of token0 to send to `to`\r\n    // /// @param amount1Out   Amount of token1 to send to `to`\r\n    // /// @param to           Address to recieve the swapped output\r\n    // /// @param data         Additional calldata for flashloans\r\n    // function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n\r\n    // /// @notice This low-level function should be called from a contract which performs important safety checks\r\n    // ///         standard uniswap v2 implementation\r\n    // /// @param to Address to receive token0 and token1 from burning the pool token\r\n    // /// @return amount0 Amount of token0 returned\r\n    // /// @return amount1 Amount of token1 returned\r\n    // function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    // /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\r\n    // ///         standard uniswap v2 implementation\r\n    // /// @param to           Address to receive the minted LP token\r\n    // /// @return liquidity   Amount of LP token minted\r\n    // function mint(address to) external returns (uint256 liquidity);\r\n\r\n    // /// @notice Update reserves and, on the first call per block, price accumulators\r\n    // /// @return _reserve0 .\r\n    // /// @return _reserve1 .\r\n    // /// @return _blockTimestampLast .\r\n    // function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\r\n\r\n    // /// @notice Get the amount of tokenOut given the amount of tokenIn\r\n    // /// @param amountIn Amount of token in\r\n    // /// @param tokenIn  Address of token\r\n    // /// @return Amount out\r\n    // function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\r\n\r\n    // /// @notice Force balances to match reserves\r\n    // /// @param to Address to receive any skimmed rewards\r\n    // function skim(address to) external;\r\n\r\n    // /// @notice Force reserves to match balances\r\n    // function sync() external;\r\n\r\n    /// @notice Called on pool creation by PoolFactory\r\n    /// @param _token Address of token\r\n    /// @param _owner Address of owner\r\n    function initialize(address _token, address _owner) external;\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/interfaces/IValidator.sol": {
				"IValidator": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"initialize(address,address)": {
								"params": {
									"_owner": "Address of owner",
									"_token": "Address of token"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initialize(address,address)": "485cc955"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"params\":{\"_owner\":\"Address of owner\",\"_token\":\"Address of token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address)\":{\"notice\":\"Called on pool creation by PoolFactory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IValidator.sol\":\"IValidator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IValidator.sol\":{\"keccak256\":\"0x27040e8a7f0ee57f7785788f0f5f6113e0ae887ac449094f520aef6ecb386317\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f5cc5ff99c94bb21f0d49c0b328b293e5beca351ee3f9885a2a69d80738ca13\",\"dweb:/ipfs/QmeDEb8msPnWZijmiSehP6E6pQ5jKaK6rhMQ9Swwgvav5B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"initialize(address,address)": {
								"notice": "Called on pool creation by PoolFactory"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/interfaces/IValidator.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IValidator.sol",
					"exportedSymbols": {
						"IValidator": [
							10
						]
					},
					"id": 11,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IValidator",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 10,
							"linearizedBaseContracts": [
								10
							],
							"name": "IValidator",
							"nameLocation": "71:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "8782:130:0",
										"text": "@notice Called on pool creation by PoolFactory\n @param _token Address of token\n @param _owner Address of owner"
									},
									"functionSelector": "485cc955",
									"id": 9,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "8927:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "8946:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "8938:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8938:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 6,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "8962:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "8954:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8954:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8937:32:0"
									},
									"returnParameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8978:0:0"
									},
									"scope": 10,
									"src": "8918:61:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 11,
							"src": "61:8921:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:8949:0"
				},
				"id": 0
			}
		}
	}
}